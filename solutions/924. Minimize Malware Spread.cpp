class Solution {
public:
    int find(int x, int parent[]){
        if(x == parent[x])
            return x;
        return parent[x] = find(parent[x], parent);
    }
    
    void merge(int x, int y, int parent[], int size[]){
        int px = find(x, parent);
        int py = find(y, parent);
        
        if(px != py){
            if(size[px] > size[py]){
                parent[py] = px;
                size[px] += size[py];
            }
            else if(size[py] > size[px]){
                parent[px] = py;
                size[py] += size[px];
            }
            else{
                parent[px] = py;
                size[py] += size[px];
            }
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& arr) {
        int n = graph.size();
        
        int parent[n];
        int size[n];
        
        
        for(int i=0;i<n;i++){
            parent[i] = i;
            size[i] = 1;
        }
        
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<graph[i].size();j++){
                if(graph[i][j] == 1)
                    merge(i, j, parent, size);
            }
        }
        
        map<int, int> leaders;
        int node = arr[0];
        for(int i=0;i<arr.size();i++){
            int p = parent[arr[i]];
            leaders[p]++;
            node = min(node, arr[i]);
        }
        
        int max_count = 0;
    
        for(int i=0;i<arr.size();i++){
            int p = parent[arr[i]];
            int freq = leaders[p];
            if(freq != 1)
                continue;
            if(size[p] > max_count){
                max_count = size[p];
                node = arr[i];
            }
            else if(size[p] == max_count && arr[i] < node){
                node = arr[i];
            }
        }
        return node;
    }
};
